PACOTES DO CUDA:
    https://medium.com/@juancrrn/installing-cuda-and-cudnn-in-ubuntu-20-04-for-deep-learning-dad8841714d6

    CUDA Toolkit;
    wget https://developer.download.nvidia.com/compute/cuda/12.1.1/local_installers/cuda_12.1.1_530.30.02_linux.run
    sudo sh cuda_12.1.1_530.30.02_linux.run --toolkit --silent --override

    
    To do this, create a file at /etc/modprobe.d/blacklist-nouveau.conf with the following contents:
    blacklist nouveau
    options nouveau modeset=0

    sudo update-initramfs -u

    reinicie o pc

    instale o drive da nvidia compativel

    veja a versão do cuda e o drive nvidia com:
        nvidia-smi

    Verifique se o CUDA foi instalado corretamente.
        /usr/local/cuda-12.1
    Adicione no ~/.bashrc
        # NVIDIA CUDA Toolkit
        export CUDA_HOME=/usr/local/cuda-12.1
        export LD_LIBRARY_PATH=${CUDA_HOME}/lib64:$LD_LIBRARY_PATH
        export PATH=${CUDA_HOME}/bin:${PATH}
    Reinicie o arquivo
        source ~/.bashrc
    Verifique se a instalação funcionou:
        cat /proc/driver/nvidia/version
        nvcc --version

CUDA CNN:
    https://docs.nvidia.com/deeplearning/cudnn/install-guide/

    sudo apt-get install libcudnn8=8.9.2.26-1+cuda12.1
    sudo apt-get install libcudnn8-dev=8.9.2.26-1+cuda12.1
    sudo apt-get install libcudnn8-samples=8.9.2.26-1+cuda12.1



INSTALAR:
    sudo apt install 
        build-essential 
        cmake  
        pkg-config 
        libgtk-3-dev  
        libavcodec-dev 
        libavformat-dev 
        libswscale-dev 
        libv4l-dev  
        libxvidcore-dev 
        libx264-dev 
        libjpeg-dev 
        libpng-dev 
        libtiff-dev  
        gfortran 
        openexr 
        libatlas-base-dev 
        python3-dev 
        python3-numpy  
        libtbb2 
        libtbb-dev 
        libopenexr-dev  
        libgstreamer-plugins-base1.0-dev 
        libgstreamer1.0-dev


PACOTES PARA A COMPILAÇÃO:
    sudo apt install 
        g++-9 
        gcc-10 
        g++-10


CLONAR OPENCV E OPENCV CONTRIB:
    Ambos devem estar na mesma versão.
        https://github.com/opencv/opencv
        https://github.com/opencv/opencv_contrib/



COMANDO PARA BUILDAR O OPENCV COM O CUDA:
    Crie uma pasta build  e execute esse comando.


cmake \
    -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local  \
    -D INSTALL_C_EXAMPLES=OFF  \
    -D WITH_TBB=ON \
    -D WITH_QT=ON  \
    -D WITH_OPENGL=ON  \
    -D WITH_GSTREAMER=ON  \
    -D OPENCV_GENERATE_PKGCONFIG=ON  \
    -D OPENCV_PC_FILE_NAME=opencv.pc  \
    -D OPENCV_ENABLE_NONFREE=ON  \
    -D OPENCV_EXTRA_MODULES_PATH=/home/edno/Desktop/GESEC/compilador_opencv_cuda/opencv_contrib/modules  \
    -D BUILD_EXAMPLES=OFF  \
    -D WITH_CUDA=ON  \
    -D WITH_CUDNN=OFF  \
    -D CMAKE_CXX_STANDARD=11 \
    -D ENABLE_FAST_MATH=1  \
    -D CUDA_FAST_MATH=1  \
    -D CUDA_ARCH_BIN=7.5  \
    -D WITH_CUBLAS=ON  \
    -D HAVE_opencv_python3=ON \
    -D WITH_CUBLAS=ON \
    -D OPENCV_DNN_CUDA=OFF  \
    -D DBUILD_opencv_cudacodec=OFF \
    ..





COMPILAR O CÓDIGO:
    Obter a quantidade de threads para aumentar a velocidade dde compilação.
        nproc

    make -j6



VERIFICAR SE O CV2 VEIO COM CUDA;
    import cv2
    print(cv2.getBuildInformation())
